# Retrieve basic information about employees in department 101

SELECT employee_id, first_name, last_name, job_title
FROM employees
WHERE department_id = 101;

# Objective: Find the total sales and average order value for a specific product category

SELECT category, SUM(sales_amount) AS total_sales, AVG(order_value) AS avg_order_value
FROM sales
WHERE category = 'Electronics'
GROUP BY category;


# Objective: Get details of customers who made a purchase in the last month, along with their order information.

SELECT customers.customer_id, customers.customer_name, orders.order_id, orders.order_date
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
WHERE orders.order_date >= '2023-10-01' AND orders.order_date < '2023-11-01';


# Objective: Identify patterns in product sales by analyzing monthly sales data.

SELECT EXTRACT(MONTH FROM order_date) AS month, COUNT(*) AS order_count
FROM orders
GROUP BY month
ORDER BY month;


# Objective: Check for missing information in a critical table.

SELECT *
FROM important_table
WHERE required_field IS NULL;


# Objective: Find the top-performing salespeople based on their total sales.

SELECT salesperson_id, SUM(sales_amount) AS total_sales
FROM sales
GROUP BY salesperson_id
ORDER BY total_sales DESC
LIMIT 5;


# Objective: Analyze trends in customer sign-ups over the past year.

SELECT EXTRACT(MONTH FROM signup_date) AS month, COUNT(*) AS signups
FROM customers
WHERE signup_date >= '2022-11-01'
GROUP BY month
ORDER BY month;


# Objective: Find all orders containing a specific product.
SELECT orders.order_id, order_items.product_name, order_items.quantity
FROM orders
JOIN order_items ON orders.order_id = order_items.order_id
WHERE order_items.product_name = 'Smartphone';


# Objective: Identify and delete duplicate records from a table.


DELETE FROM my_table
WHERE rowid NOT IN (
    SELECT MIN(rowid)
    FROM my_table
    GROUP BY unique_column
);


# Objective: Calculate the average salary for each department, excluding salaries above a certain threshold.

SELECT department_id, AVG(salary) AS avg_salary
FROM employees
WHERE salary < 100000
GROUP BY department_id;


# Objective: Calculate the total revenue generated by each product category.

SELECT category, SUM(sales_amount) AS total_revenue
FROM sales
GROUP BY category;

# Objective: Find all products with names containing the word "organic."

SELECT product_id, product_name
FROM products
WHERE product_name LIKE '%organic%';

# Objective: Retrieve orders placed in the last 7 days.

SELECT order_id, customer_id, order_date
FROM orders
WHERE order_date >= CURRENT_DATE - INTERVAL '7' DAY;


# Objective: Get a list of employees and their managers

SELECT e.employee_id, e.employee_name, m.employee_name AS manager_name
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id;


# Objective: Find customers who made a purchase within the last month.

SELECT customer_id, customer_name
FROM customers
WHERE customer_id IN (
    SELECT DISTINCT customer_id
    FROM orders
    WHERE order_date >= CURRENT_DATE - INTERVAL '1' MONTH
);

# Objective: Find departments with more than five employees.

SELECT department_id, COUNT(*) AS employee_count
FROM employees
GROUP BY department_id
HAVING COUNT(*) > 5;

# Objective: Calculate the running total of sales.

    WITH SalesCTE AS (
    SELECT order_date, SUM(sales_amount) OVER (ORDER BY order_date) AS running_total
    FROM sales
)
SELECT order_date, running_total
FROM SalesCTE;

# Objective: Calculate the number of orders per customer category.

SELECT customer_category,
       COUNT(CASE WHEN order_date >= '2023-01-01' THEN 1 END) AS orders_this_year,
       COUNT(CASE WHEN order_date < '2023-01-01' THEN 1 END) AS orders_prior_years
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customer_category;


# Objective: Find the top-selling product in each category.

    SELECT category, product_name, sales_amount
FROM (
    SELECT category, product_name, sales_amount,
           ROW_NUMBER() OVER (PARTITION BY category ORDER BY sales_amount DESC) AS ranking
    FROM products
) ranked_products
WHERE ranking = 1;


# Objective: Find the age of employees in years.

SELECT employee_name, DATE_PART('year', AGE(CURRENT_DATE, birthdate)) AS age_years
FROM employees;


# Objective: Randomly sample 10% of customer data.

SELECT *
FROM customers
TABLESAMPLE SYSTEM (10);




